
# Grammar for SimpleLang

Program            -> Declaration*

# Declarations
Declaration        -> FunctionDeclaration | VariableDeclaration
FunctionDeclaration -> ReturnType IDENTIFIER "(" ParameterList? ")" BlockStatement
VariableDeclaration -> Type IDENTIFIER ("=" Expression)? ";"

# Types
Type               -> "whole" | "fraction" | "letter" | "text"

# Parameters
ParameterList      -> Parameter ("," Parameter)*
Parameter          -> Type IDENTIFIER

# Statements
Statement          -> VariableDeclaration
                   | ReturnStatement
                   | IfStatement
                   | WhileStatement
                   | ForStatement
                   | BlockStatement
                   | ExpressionStatement

BlockStatement     -> "{" Statement* "}"
ReturnStatement    -> "output" Expression? ";"
IfStatement        -> "check" "(" Expression ")" Statement ("otherwise" Statement)?
WhileStatement     -> "loop" "(" Expression ")" Statement
ForStatement       -> "iterate" "(" Expression? ";" Expression? ";" Expression? ")" Statement
ExpressionStatement -> Expression ";"

# Comments
Comment            -> SingleLineComment | MultiLineComment
SingleLineComment  -> "!!" (~["\\n"])* "\\n"
MultiLineComment   -> "(!" (~["!)"])* "!)"

# Expressions
Expression         -> ComparisonExpression
ComparisonExpression -> AdditiveExpression (ComparisonOperator AdditiveExpression)*
ComparisonOperator -> "==" | "!=" | "<" | ">" | "<=" | ">="
AdditiveExpression -> Primary (("+" | "-") Primary)*
Primary            -> NUMBER | STRING_LITERAL | IDENTIFIER | "(" Expression ")" | FunctionCall
FunctionCall       -> IDENTIFIER "(" ArgumentList? ")"

# Arguments
ArgumentList       -> Expression ("," Expression)*

# Tokens (from lexer)
NUMBER             -> [0-9]+(\.[0-9]+)?
STRING_LITERAL     -> """ ( [^"] | "\"" )* """
IDENTIFIER         -> [a-zA-Z_][a-zA-Z0-9_]*
